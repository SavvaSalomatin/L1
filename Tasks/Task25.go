package Tasks

//Реализовать собственную функцию sleep.
import (
	"fmt"
	"time"
)

// Без использования библиотеки time сделать невозможно, только если на основе вычислительных ресурсов
//(Например, запустить цикл инкрементации 1 в переменную до каких-то огромных значений, но это потратит много
//ресурсов и отследить размер такой задержки будет невозможно
//sleep на основе отправки сигнала по истечению некоторого времени
func sleep1(tm int) {
	<-time.After(time.Duration(tm) * time.Second)
}

//sleep на основе отсчета задержки от времени t и перевода в тип float64
func sleep2(tm int) {
	t := time.Now()
	for time.Now().Sub(t).Seconds() < float64(tm) {
	}
}

func T25() {
	fmt.Println("Остановка")
	sleep1(5)
	fmt.Println("Продолжение после 5 секунд")
	fmt.Println("Остановка")
	sleep2(10)
	fmt.Println("Продолжение после 10 секунд")
}
